import mongoose from "mongoose";

const orderSchema = new mongoose.Schema(
  {
    buyer: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
    product: { type: mongoose.Schema.Types.ObjectId, ref: "Product", required: true },
    quantity: { type: Number, required: true },
    price: { type: Number, required: true }, // price per unit at time of order
    total: { type: Number, required: true },
    status: {
      type: String,
      enum: ["Pending", "Completed", "Cancelled"],
      default: "Pending",
      approved: { type: Boolean, default: false },
    },
  },
  { timestamps: true }
);

const Order = mongoose.model("Order", orderSchema);
export default Order;

_____________________________
// apps/backend/src/models/Agent.js
import mongoose from "mongoose";
import bcrypt from "bcryptjs";

const agentSchema = new mongoose.Schema({
  fullName: { type: String, required: true, trim: true },
  email: { type: String, required: true, lowercase: true, unique: true },
  password: { type: String, required: true },
  phone: { type: String },
  region: { type: String },
  commissionEarned: { type: Number, default: 0 },
  role: { type: String, default: "agent" },
  createdAt: { type: Date, default: Date.now },
});

// Hash password when saving (only if modified)
agentSchema.pre("save", async function(next) {
  if (!this.isModified("password")) return next();
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
  next();
});

// method to compare password
agentSchema.methods.matchPassword = async function(enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password);
};

export default mongoose.model("Agent", agentSchema);

_____________________________
// backend/src/models/Product.js
import mongoose from "mongoose";

const productSchema = new mongoose.Schema(
  {
    farmer: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
    name: { type: String, required: true },
    description: { type: String },
    price: { type: Number, required: true },
    quantity: { type: Number, required: true },
    quality: { type: String },
    isOrganic: { type: Boolean, default: false },
    images: [{ type: String }],
    approved: { type: Boolean, default: false }, 
  },
  { timestamps: true }
);

export default mongoose.model("Product", productSchema);
_____________________________
// apps/backend/src/routes/agentRoutes.js
import express from "express";
import {
  registerAgent,
  loginAgent,
  getAgentProfile,
  updateAgentProfile,
  getAgentFarmers,
  addFarmerByAgent,
  verifyFarmer,
  listProductsForAgent,
  approveProduct,
  getOrdersForAgent,
  approveOrder,
  updateOrderStatus,
  getAgentDashboard,
} from "../controllers/agentController.js";
import { protect, authorizeRoles } from "../middlewares/authMiddleware.js";

const router = express.Router();

// Auth
router.post("/register", registerAgent);
router.post("/login", loginAgent);

// Dashboard
router.get("/dashboard", protect, authorizeRoles("agent"), getAgentDashboard);

// Farmers
router.get("/farmers", protect, authorizeRoles("agent"), getAgentFarmers);
router.post("/farmers", protect, authorizeRoles("agent"), addFarmerByAgent);
router.put("/farmers/verify", protect, authorizeRoles("agent"), verifyFarmer);

// Products
router.get("/products", protect, authorizeRoles("agent"), listProductsForAgent);
router.put("/products/:productId/approve", protect, authorizeRoles("agent"), approveProduct);

// Orders
router.get("/orders", protect, authorizeRoles("agent"), getOrdersForAgent);
router.put("/orders/:id/approve", protect, authorizeRoles("agent"), approveOrder);
router.put("/orders/:id/status", protect, authorizeRoles("agent"), updateOrderStatus);

// Profile
router.get("/profile", protect, authorizeRoles("agent"), getAgentProfile);
router.put("/profile", protect, authorizeRoles("agent"), updateAgentProfile);

export default router;
_____________________________
// apps/backend/src/controllers/agentController.js
import Agent from "../models/Agent.js";
import User from "../models/User.js";
import Order from "../models/Order.js";
import Product from "../models/Product.js";
import Crop from "../models/Crop.js";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";

// =================== AUTH ===================
const signToken = (payload) =>
  jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: "7d" });

export const registerAgent = async (req, res) => {
  try {
    const { fullName, email, password, phone, region } = req.body;

    const exists = await Agent.findOne({ email });
    if (exists) return res.status(400).json({ message: "Agent already exists" });

    const hashed = await bcrypt.hash(password, 10);
    const agent = new Agent({
      fullName,
      email,
      password: hashed,
      phone,
      region,
    });

    await agent.save();
    res.status(201).json({ message: "Agent registered successfully", agent });
  } catch (error) {
    res
      .status(500)
      .json({ message: "Error registering agent", error: error.message });
  }
};

export const loginAgent = async (req, res) => {
  try {
    const { email, password } = req.body;
    const agent = await Agent.findOne({ email });

    if (!agent) return res.status(400).json({ message: "Invalid credentials" });

    const match = await bcrypt.compare(password, agent.password);
    if (!match) return res.status(400).json({ message: "Invalid credentials" });

    const token = signToken({
      _id: agent._id,
      role: "agent",
      email: agent.email,
    });

    const userSafe = {
      _id: agent._id,
      fullName: agent.fullName || "",
      email: agent.email,
      phone: agent.phone,
      region: agent.region,
      role: "agent",
    };

    res.json({ message: "Login successful", token, user: userSafe });
  } catch (err) {
    console.error("loginAgent:", err);
    res.status(500).json({ message: "Error logging in" });
  }
};

// =================== DASHBOARD ===================
export const getAgentDashboard = async (req, res) => {
  try {
    const farmers = await User.countDocuments({ role: "farmer" });
    const crops = await Crop.countDocuments({});
    const pendingOrders = await Order.countDocuments({ status: "Pending" });
    const completedOrders = await Order.countDocuments({ status: "Completed" });

    res.json({
      farmers,
      crops,
      pendingOrders,
      completedOrders,
    });
  } catch (error) {
    res
      .status(500)
      .json({
        message: "Error fetching agent dashboard",
        error: error.message,
      });
  }
};

// =================== FARMERS ===================
export const getAgentFarmers = async (req, res) => {
  try {
    const farmers = await User.find({ role: "farmer" }).select("-password");
    res.json(farmers);
  } catch (error) {
    res
      .status(500)
      .json({ message: "Error fetching farmers", error: error.message });
  }
};

export const addFarmerByAgent = async (req, res) => {
  try {
    const { fullName, email, password, phone, age, address } = req.body;

    const exists = await User.findOne({ email });
    if (exists) return res.status(400).json({ message: "Farmer already exists" });

    const hashed = await bcrypt.hash(password, 10);
    const farmer = new User({
      fullName,
      email,
      password: hashed,
      role: "farmer",
      phone,
      age,
      address,
    });
    await farmer.save();

    res.status(201).json({ message: "Farmer added successfully", farmer });
  } catch (error) {
    res
      .status(500)
      .json({ message: "Error adding farmer", error: error.message });
  }
};

export const verifyFarmer = async (req, res) => {
  try {
    const { farmerId, verify } = req.body;
    const farmer = await User.findById(farmerId);

    if (!farmer)
      return res.status(404).json({ message: "Farmer not found" });

    farmer.verified = verify;
    await farmer.save();

    res.json({ message: verify ? "Farmer verified" : "Farmer unverified" });
  } catch (error) {
    res
      .status(500)
      .json({ message: "Error verifying farmer", error: error.message });
  }
};

// =================== PRODUCTS ===================
export const listProductsForAgent = async (req, res) => {
  try {
    const products = await Product.find().populate("farmer", "fullName email");
    res.json(products);
  } catch (error) {
    res
      .status(500)
      .json({ message: "Error fetching products", error: error.message });
  }
};

export const approveProduct = async (req, res) => {
  try {
    const { productId } = req.params;
    const { approve } = req.body;

    const product = await Product.findById(productId);
    if (!product) return res.status(404).json({ message: "Product not found" });

    product.approved = !!approve;
    await product.save();

    res.json({
      message: approve ? "Product approved" : "Product unapproved",
      product,
    });
  } catch (error) {
    res
      .status(500)
      .json({ message: "Error approving product", error: error.message });
  }
};

// =================== ORDERS ===================
export const getOrdersForAgent = async (req, res) => {
  try {
    const orders = await Order.find()
      .populate("buyer", "fullName email")
      .populate("product", "name price");
    res.json(orders);
  } catch (error) {
    res
      .status(500)
      .json({ message: "Error fetching orders", error: error.message });
  }
};

export const approveOrder = async (req, res) => {
  try {
    const { id } = req.params;
    const { approve } = req.body;

    const order = await Order.findById(id).populate("farmer");
    if (!order) return res.status(404).json({ message: "Order not found" });

    order.approved = !!approve;
    await order.save();

    res.json({ message: approve ? "Order approved" : "Order unapproved", order });
  } catch (err) {
    console.error("approveOrder:", err);
    res.status(500).json({ message: "Error approving order" });
  }
};

export const updateOrderStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;

    const order = await Order.findById(id).populate("farmer");
    if (!order) return res.status(404).json({ message: "Order not found" });

    order.status = status;
    await order.save();

    res.json({ message: "Order status updated", order });
  } catch (err) {
    console.error("updateOrderStatus:", err);
    res.status(500).json({ message: "Error updating order status" });
  }
};

// =================== PROFILE ===================
export const getAgentProfile = async (req, res) => {
  try {
    const agent = await Agent.findById(req.user._id).select("-password");
    res.json(agent);
  } catch (error) {
    res
      .status(500)
      .json({ message: "Error fetching profile", error: error.message });
  }
};

export const updateAgentProfile = async (req, res) => {
  try {
    const agent = await Agent.findById(req.user._id);
    if (!agent) return res.status(404).json({ message: "Agent not found" });

    const { fullName, phone, region, password } = req.body;
    if (fullName) agent.fullName = fullName;
    if (phone) agent.phone = phone;
    if (region) agent.region = region;
    if (password) agent.password = await bcrypt.hash(password, 10);

    await agent.save();
    res.json({ message: "Profile updated", agent });
  } catch (error) {
    res
      .status(500)
      .json({ message: "Error updating profile", error: error.message });
  }
};
_____________________________


// apps/frontend/src/pages/Agent/Farmers/AgentFarmers.jsx
import React, { useEffect, useState } from "react";
import API from "../../../api";
//import AgentSidebar from "../../../components/AgentSidebar";
import "../../../pages/Agent/Agent.css";
import "./FarmersPage.css";
import { motion } from "framer-motion";
import { slideInLeft } from "../../Agent/animation";

export default function AgentFarmers() {
  const [farmers, setFarmers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showAdd, setShowAdd] = useState(false);
  const [form, setForm] = useState({ fullName:"", email:"", phone:"", password:"" });

  const fetchFarmers = async () => {
    setLoading(true);
    try {
      const { data } = await API.get("/agents/farmers");
      setFarmers(data || []);
    } catch (err) {
      console.error("fetch farmers error", err);
      alert("Failed to fetch farmers");
    } finally { setLoading(false); }
  };

  useEffect(()=> { fetchFarmers() }, []);

  const handleCreate = async (e) => {
    e.preventDefault();
    try {
      await API.post("/agents/farmers", form);
      setForm({ fullName:"", email:"", phone:"", password:"" });
      setShowAdd(false);
      fetchFarmers();
      alert("Farmer created");
    } catch (err) {
      console.error("create farmer", err);
      alert(err.response?.data?.message || "Failed to create");
    }
  };

  const toggleVerify = async (farmerId, verify) => {
    if (!window.confirm(`${verify ? "Verify" : "Unverify"} farmer?`)) return;
    try {
      await API.put("/agents/farmers/verify", { farmerId, verify });
      fetchFarmers();
    } catch (err) {
      console.error("verify farmer", err);
      alert("Failed to update farmer");
    }
  };

  return (
    <div className="agent-layout">
     
      <main className="agent-main">
        <motion.div initial="hidden" animate="visible" variants={slideInLeft}>
          <div style={{display:"flex", justifyContent:"space-between", alignItems:"center", marginBottom:12}}>
            <h2>Farmers</h2>
            <div>
              <button className="btn" onClick={() => setShowAdd(s=>!s)}>{showAdd ? "Close" : "Add Farmer"}</button>
            </div>
          </div>

          {showAdd && (
            <form className="panel" onSubmit={handleCreate} style={{marginBottom:12}}>
              <div style={{display:"grid", gridTemplateColumns:"1fr 1fr", gap:10}}>
                <input className="input" placeholder="Full name" value={form.fullName} onChange={(e)=>setForm({...form, fullName:e.target.value})} required />
                <input className="input" placeholder="Email" value={form.email} onChange={(e)=>setForm({...form, email:e.target.value})} required />
                <input className="input" placeholder="Phone" value={form.phone} onChange={(e)=>setForm({...form, phone:e.target.value})} />
                <input className="input" placeholder="Password (temp)" value={form.password} onChange={(e)=>setForm({...form, password:e.target.value})} />
              </div>
              <div style={{marginTop:10}}>
                <button className="btn" type="submit">Create</button>
              </div>
            </form>
          )}

          <div className="panel table">
            {loading ? <p>Loading farmers...</p> :
              <table>
                <thead><tr><th>Name</th><th>Email</th><th>Phone</th><th>Verified</th><th>Action</th></tr></thead>
                <tbody>
                  {farmers.length === 0 ? <tr><td colSpan={5}>No farmers assigned.</td></tr> :
                    farmers.map(f => (
                      <tr key={f._id}>
                        <td>{f.fullName || f.name}</td>
                        <td>{f.email}</td>
                        <td>{f.phone || "-"}</td>
                        <td>{f.verified ? <span className="tag-approved">Verified</span> : <span className="tag-pending">Pending</span>}</td>
                        <td>
                          <button className="btn secondary" onClick={()=>toggleVerify(f._id, !f.verified)}>
                            {f.verified ? "Unverify" : "Verify"}
                          </button>
                        </td>
                      </tr>
                    ))
                  }
                </tbody>
              </table>
            }
          </div>
        </motion.div>
      </main>
    </div>
  );
}
_____________________________
// apps/frontend/src/pages/Agent/Marketplace/AgentMarketplace.jsx
import React, { useEffect, useState } from "react";
import API from "../../../api";
//import AgentSidebar from "../../../components/AgentSidebar";
import "../../../pages/Agent/Agent.css";
import "./AgentMarketplace.css";
import { motion } from "framer-motion";
import { slideInRight } from "../../Agent/animation";

export default function AgentMarketplace() {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);

  const fetchProducts = async () => {
    setLoading(true);
    try {
      const { data } = await API.get("/agents/products"); // your endpoint
      setProducts(data || []);
    } catch (err) {
      console.error("fetch products", err);
      alert("Failed to fetch products");
    } finally { setLoading(false); }
  };

  useEffect(()=> { fetchProducts() }, []);

  const toggleApprove = async (id, approve) => {
    if (!window.confirm(`${approve ? "Approve" : "Unapprove"} product?`)) return;
    try {
      await API.put(`/agents/products/${id}/approve`, { approve });
      fetchProducts();
      alert("Product status updated");
    } catch (err) {
      console.error("approve product", err);
      alert("Failed to update product");
    }
  };

  return (
    <div className="agent-layout">
     
      <main className="agent-main">
        <motion.div initial="hidden" animate="visible" variants={slideInRight}>
          <div style={{display:"flex", justifyContent:"space-between", alignItems:"center", marginBottom:12}}>
            <h2>Marketplace (My Farmers)</h2>
            <div><button className="btn" onClick={fetchProducts}>Refresh</button></div>
          </div>

          <div className="panel">
            {loading ? <p>Loading products...</p> :
              products.length === 0 ? <p>No products found.</p> :
              <div style={{display:"grid", gridTemplateColumns:"repeat(auto-fill,minmax(280px,1fr))", gap:12}}>
                {products.map(p => (
                  <div key={p._id} className="panel" style={{display:"flex", flexDirection:"column", gap:8}}>
                    <div style={{display:"flex", gap:12, alignItems:"center"}}>
                      <div style={{width:72,height:72,background:"#eef2ff",borderRadius:8,display:"flex",alignItems:"center",justifyContent:"center"}}>
                        {/* image placeholder */}
                        {/* {p.images && p.images.length ? <img src={p.images[0].startsWith("http") ? p.images[0] : `${(process.env.REACT_APP_API_URL||"")?.replace("/api","")}/uploads/${p.images[0].replace(/^\/?uploads\//,"")}`} alt="img" style={{width:68,height:68,objectFit:"cover",borderRadius:6}} /> : <div style={{fontSize:12,color:"#2563eb"}}>Image</div>} */}
                      </div>
                      <div style={{flex:1}}>
                        <h3 style={{margin:0}}>{p.name}</h3>
                        {/* <p className="small">{p.description}</p> */}
                        <div className="small">Farmer: {p.farmer?.fullName || p.farmer?.name || "—"}</div>
                        <div style={{marginTop:8}}><strong>₹{p.price}</strong> • {p.quantity} kg</div>
                      </div>
                    </div>

                    <div style={{display:"flex", justifyContent:"space-between", alignItems:"center", marginTop:6}}>
                      <div className={p.approved ? "tag-approved" : "tag-pending"}>{p.approved ? "Approved" : "Pending"}</div>
                      <div style={{display:"flex", gap:8}}>
                        <button className="btn secondary" onClick={()=>toggleApprove(p._id, !p.approved)}>{p.approved ? "Unapprove" : "Approve"}</button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            }
          </div>
        </motion.div>
      </main>
    </div>
  );
}
_______-
_____________________________
// apps/frontend/src/pages/Agent/Orders/AgentOrders.jsx
import React, { useEffect, useState } from "react";
import API from "../../../api";
//import AgentSidebar from "../../../components/AgentSidebar";
import "../../../pages/Agent/Agent.css";
import "./AgentOrders.css";
import { motion } from "framer-motion";
import { fadeInUp } from "../../Agent/animation";

export default function AgentOrders() {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);

  const fetchOrders = async () => {
    setLoading(true);
    try {
      const { data } = await API.get("/agents/orders");
      setOrders(data || []);
    } catch (err) {
      console.error("fetch orders", err);
      alert("Failed to fetch orders");
    } finally { setLoading(false); }
  };

  useEffect(()=> { fetchOrders() }, []);

  const approveOrder = async (id, approve) => {
    if (!window.confirm(`${approve ? "Approve" : "Reject"} order?`)) return;
    try {
      await API.put(`/agents/orders/${id}/approve`, { approve });
      fetchOrders();
      alert("Order updated");
    } catch (err) {
      console.error("approve order", err);
      alert("Failed to update");
    }
  };

  const changeStatus = async (id, status) => {
    if (!window.confirm(`Set status to ${status}?`)) return;
    try {
      await API.put(`/agents/orders/${id}/status`, { status });
      fetchOrders();
      alert("Order status updated");
    } catch (err) {
      console.error("update status", err);
      alert("Failed to update status");
    }
  };

  return (
    <div className="agent-layout">
      
      <main className="agent-main">
        <motion.div initial="hidden" animate="visible" variants={fadeInUp}>
          <div style={{display:"flex", justifyContent:"space-between", alignItems:"center", marginBottom:12}}>
            <h2>Orders</h2>
            <div><button className="btn" onClick={fetchOrders}>Refresh</button></div>
          </div>

          <div className="panel table">
            {loading ? <p>Loading orders...</p> :
              <table>
                <thead>
                  <tr>
                    <th>Order</th><th>Product</th><th>Farmer</th><th>Buyer</th><th>Qty</th><th>Total</th><th>Status</th><th>Approved</th><th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {orders.length === 0 ? <tr><td colSpan={9}>No orders</td></tr> :
                    orders.map(o => (
                      <tr key={o._id}>
                        <td>{o._id}</td>
                        <td>{o.product?.name}</td>
                        <td>{o.farmer?.fullName || o.farmer?.name}</td>
                        <td>{o.buyer?.fullName || o.buyer?.email}</td>
                        <td>{o.quantity}</td>
                        <td>₹{o.total}</td>
                        <td><span className="pill">{o.status}</span></td>
                        <td>{o.approved ? <span className="tag-approved">Yes</span> : <span className="tag-pending">No</span>}</td>
                        <td style={{display:"flex", gap:8}}>
                          <button className="btn secondary" onClick={() => approveOrder(o._id, !o.approved)}>{o.approved ? "Unapprove" : "Approve"}</button>
                          <select className="input" defaultValue={o.status || "Pending"} onChange={(e)=>changeStatus(o._id, e.target.value)}>
                            <option>Pending</option>
                            <option>Confirmed</option>
                            <option>Shipped</option>
                            <option>Delivered</option>
                            <option>Cancelled</option>
                          </select>
                        </td>
                      </tr>
                    ))
                  }
                </tbody>
              </table>
            }
          </div>
        </motion.div>
      </main>
    </div>
  );
}
