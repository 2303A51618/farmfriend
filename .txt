// apps/frontend/src/pages/Auth/AgentLogin/AgentLogin.jsx
import React, { useState } from "react";
import API from "../../../api"; 
import { useNavigate } from "react-router-dom";
import "../../Auth/Auth.css"; 

function AgentLogin() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      // call backend route (API uses baseURL from .env)
      const res = await API.post("/agents/login", { email, password });

      // Expect backend response: { message, user, token } or { token, user }
      const { token, user } = res.data;

      if (!token || !user) {
        console.error("Agent login response missing token/user:", res.data);
        return alert("Login failed: invalid response from server");
      }

      // Save to localStorage
      localStorage.setItem("token", token);
      localStorage.setItem("user", JSON.stringify(user));

      console.log("Agent login response:", res.data);

      // navigate to agent dashboard
      navigate("/agent/dashboard");
    } catch (err) {
      console.error("Agent Login Error:", err.response?.data || err.message);
      alert("Login failed: " + (err.response?.data?.message || err.message));
    }
  };

  return (
    <div className="auth-container">
      <h2>Agent Login</h2>
      <form onSubmit={handleSubmit}>
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
        <button type="submit">Login</button>
      </form>
    </div>
  );
}

export default AgentLogin;
__________________
import Agent from "../models/Agent.js";
import User from "../models/User.js";
import Order from "../models/Order.js";
import Product from "../models/Product.js";
import Crop from "../models/Crop.js";
import bcrypt from "bcryptjs";

// =================== DASHBOARD ===================
export const getAgentDashboard = async (req, res) => {
  try {
    const agentId = req.user._id;

    const farmers = await User.countDocuments({ role: "farmer" });
    const crops = await Crop.countDocuments({});
    const pendingOrders = await Order.countDocuments({ status: "Pending" });
    const completedOrders = await Order.countDocuments({ status: "Completed" });

    res.json({
      farmers,
      crops,
      pendingOrders,
      completedOrders,
    });
  } catch (error) {
    res.status(500).json({ message: "Error fetching agent dashboard", error: error.message });
  }
};

// =================== FARMERS ===================
export const getAgentFarmers = async (req, res) => {
  try {
    const farmers = await User.find({ role: "farmer" }).select("-password");
    res.json(farmers);
  } catch (error) {
    res.status(500).json({ message: "Error fetching farmers", error: error.message });
  }
};

export const addFarmerByAgent = async (req, res) => {
  try {
    const { fullName, email, password, phone, age, address } = req.body;

    const exists = await User.findOne({ email });
    if (exists) return res.status(400).json({ message: "Farmer already exists" });

    const hashed = await bcrypt.hash(password, 10);
    const farmer = new User({ fullName, email, password: hashed, role: "farmer", phone, age, address });
    await farmer.save();

    res.status(201).json({ message: "Farmer added successfully", farmer });
  } catch (error) {
    res.status(500).json({ message: "Error adding farmer", error: error.message });
  }
};

// =================== PRODUCTS ===================
export const listProductsForAgent = async (req, res) => {
  try {
    const products = await Product.find().populate("farmer", "fullName email");
    res.json(products);
  } catch (error) {
    res.status(500).json({ message: "Error fetching products", error: error.message });
  }
};

// =================== ORDERS ===================
export const getOrdersForAgent = async (req, res) => {
  try {
    const orders = await Order.find()
      .populate("buyer", "fullName email")
      .populate("product", "name price");
    res.json(orders);
  } catch (error) {
    res.status(500).json({ message: "Error fetching orders", error: error.message });
  }
};


// =================== PROFILE ===================
export const getAgentProfile = async (req, res) => {
  try {
    const agent = await Agent.findById(req.user._id).select("-password");
    res.json(agent);
  } catch (error) {
    res.status(500).json({ message: "Error fetching profile", error: error.message });
  }
};

export const updateAgentProfile = async (req, res) => {
  try {
    const agent = await Agent.findById(req.user._id);
    if (!agent) return res.status(404).json({ message: "Agent not found" });

    const { fullName, phone, region, password } = req.body;
    if (fullName) agent.fullName = fullName;
    if (phone) agent.phone = phone;
    if (region) agent.region = region;
    if (password) {
      agent.password = await bcrypt.hash(password, 10);
    }

    await agent.save();
    res.json({ message: "Profile updated", agent });
  } catch (error) {
    res.status(500).json({ message: "Error updating profile", error: error.message });
  }
};

// Helper
const signToken = (payload) => jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: "7d" });

export const loginAgent = async (req, res) => {
  try {
    const { email, password } = req.body;
    const agent = await Agent.findOne({ email });

    if (!agent) return res.status(400).json({ message: "Invalid credentials" });

    const match = await bcrypt.compare(password, agent.password);
    if (!match) return res.status(400).json({ message: "Invalid credentials" });

    // include _id and role
    const token = signToken({ _id: agent._id, role: "agent", email: agent.email });

    // do not include password
    const userSafe = {
      _id: agent._id,
      fullName: agent.fullName || agent.name || "",
      email: agent.email,
      phone: agent.phone,
      region: agent.region,
      role: "agent",
    };

    return res.json({ message: "Login successful", token, user: userSafe });
  } catch (err) {
    console.error("loginAgent:", err);
    res.status(500).json({ message: "Error logging in" });
  }
};
// Approve / reject an order (toggle approved boolean)
export const approveOrder = async (req, res) => {
  try {
    const { id } = req.params;
    const { approve } = req.body; // boolean

    const order = await Order.findById(id).populate("farmer");
    if (!order) return res.status(404).json({ message: "Order not found" });

    // optional: ensure agent manages this farmer. If farmers have `agent` field:
    if (order.farmer && order.farmer.agent && order.farmer.agent.toString() !== req.user._id.toString()) {
      return res.status(403).json({ message: "Not authorized to approve this order" });
    }

    order.approved = !!approve;
    await order.save();

    res.json({ message: approve ? "Order approved" : "Order unapproved", order });
  } catch (err) {
    console.error("approveOrder:", err);
    res.status(500).json({ message: "Error approving order" });
  }
};

// Update order status (the frontend calls /orders/:id/status with { status })
export const updateOrderStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;

    const order = await Order.findById(id).populate("farmer");
    if (!order) return res.status(404).json({ message: "Order not found" });

    if (order.farmer && order.farmer.agent && order.farmer.agent.toString() !== req.user._id.toString()) {
      return res.status(403).json({ message: "Not authorized to update this order" });
    }

    order.status = status;
    await order.save();

    res.json({ message: "Order status updated", order });
  } catch (err) {
    console.error("updateOrderStatus:", err);
    res.status(500).json({ message: "Error updating order status" });
  }
};_______________________________________
// apps/backend/src/routes/agentRoutes.js
import express from "express";
import {
  registerAgent,
  loginAgent,
  getAgentProfile,
  updateAgentProfile,
  getAgentFarmers,
  addFarmerByAgent,
  verifyFarmer,
  listProductsForAgent,
  approveProduct,
  getOrdersForAgent,
  approveOrder,
  updateOrderStatus,
  getAgentDashboard,
} from "../controllers/agentController.js";
import { protect, authorizeRoles } from "../middlewares/authMiddleware.js";

const router = express.Router();

// Auth
router.post("/register", registerAgent); // or admin-only depending on your design
router.post("/login", loginAgent);

// Dashboard
router.get("/dashboard", protect, authorizeRoles("agent"), getAgentDashboard);

// Farmers
router.get("/farmers", protect, authorizeRoles("agent"), getAgentFarmers);
router.post("/farmers", protect, authorizeRoles("agent"), addFarmerByAgent);
router.put("/farmers/verify", protect, authorizeRoles("agent"), verifyFarmer);

// Products
router.get("/products", protect, authorizeRoles("agent"), listProductsForAgent);
router.put("/products/:productId/approve", protect, authorizeRoles("agent"), approveProduct);

// Orders (both endpoints)
router.get("/orders", protect, authorizeRoles("agent"), getOrdersForAgent);
router.put("/orders/:id/approve", protect, authorizeRoles("agent"), approveOrder); // approve/unapprove
router.put("/orders/:id/status", protect, authorizeRoles("agent"), updateOrderStatus); // update status

// Profile
router.get("/profile", protect, authorizeRoles("agent"), getAgentProfile);
router.put("/profile", protect, authorizeRoles("agent"), updateAgentProfile);

export default router;
_______________________________________file:///C:/Users/PC/Documents/web%20projects/ff/ffv1/ff/backend/src/routes/agentRoutes.js:14
  approveOrder,
  ^^^^^^^^^^^^
SyntaxError: The requested module '../controllers/agentController.js' does not provide an export named 'approveOrder'
    at ModuleJob._instantiate (node:internal/modules/esm/module_job:228:21)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async ModuleJob.run (node:internal/modules/esm/module_job:337:5)
    at async onImport.tracePromise.__proto__ (node:internal/modules/esm/loader:651:26)
    at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:117:5)

Node.js v22.19.0
[nodemon] app crashed - waiting for file changes before starting...
[nodemon] restarting due to changes...
[nodemon] starting `node server.js`
file:///C:/Users/PC/Documents/web%20projects/ff/ffv1/ff/backend/src/controllers/agentController.js:182
export const updateOrderStatus = async (req, res) => {
             ^

SyntaxError: Identifier 'updateOrderStatus' has already been declared
    at compileSourceTextModule (node:internal/modules/esm/utils:346:16)
    at ModuleLoader.moduleStrategy (node:internal/modules/esm/translators:107:18)
    at #translate (node:internal/modules/esm/loader:540:12)
    at ModuleLoader.loadAndTranslate (node:internal/modules/esm/loader:587:27)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async ModuleJob._link (node:internal/modules/esm/module_job:162:19)

Node.js v22.19.0
[nodemon] app crashed - waiting for file changes before starting...
[nodemon] restarting due to changes...
[nodemon] starting `node server.js`
file:///C:/Users/PC/Documents/web%20projects/ff/ffv1/ff/backend/src/routes/agentRoutes.js:12
  approveProduct,
  ^^^^^^^^^^^^^^
SyntaxError: The requested module '../controllers/agentController.js' does not provide an export named 'approveProduct'
    at ModuleJob._instantiate (node:internal/modules/esm/module_job:228:21)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async ModuleJob.run (node:internal/modules/esm/module_job:337:5)
    at async onImport.tracePromise.__proto__ (node:internal/modules/esm/loader:651:26)
    at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:117:5)

Node.js v22.19.0
[nodemon] app crashed - waiting for file changes before starting...
[nodemon] restarting due to changes...
[nodemon] starting `node server.js`
file:///C:/Users/PC/Documents/web%20projects/ff/ffv1/ff/backend/src/routes/agentRoutes.js:4
  registerAgent,
  ^^^^^^^^^^^^^
SyntaxError: The requested module '../controllers/agentController.js' does not provide an export named 'registerAgent'
    at ModuleJob._instantiate (node:internal/modules/esm/module_job:228:21)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async ModuleJob.run (node:internal/modules/esm/module_job:337:5)
    at async onImport.tracePromise.__proto__ (node:internal/modules/esm/loader:651:26)
    at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:117:5)

Node.js v22.19.0
[nodemon] app crashed - waiting for file changes before starting...


check these isuues , and fix it and give full updated code 




